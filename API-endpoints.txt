APIs
api/home
	GET api/home
		for non sign-up get 10 of top rated doctor details
			check if not authcated return 10 of top rated doctor details as json
			{id,name,photo,speciliaztion,avalble-time-slot,rate,bill,authcated}
		for sign up dactors get 

______________________________________________________________________________________________________________	
______________________________________________________________________________________________________________			
______________________________________________________________________________________________________________	

api/profile
	GET api/profile/:id
		for sign in only
		return profile data as json depend on id
			
			check type by id in url if owner of account OR admin >> id===acoundID
			{photoURL, name, id, phone, email,bill,
			 spechlization, degree, salary,rate,comment} >> for non exsting data assign none
			 										
			check type by id in url if doctor or admin and not owner 
			{photoURL, name, id, bill, spechlization, degree,rate,comment}
			
			check type by id in url if patient and not owner or admin
			{type,photoURL, name, id, phone}
			
	PATCH api/profile/:id
		for sign in only
		update profile data as json depend on id
			check type by id in url if owner of account OR admin >> id===acoundID
			you willl recive json
			{photoURL, name, phone, email, nextAppointment, bills, result, roshita,
			 spechlization, degree, timeSlot, salary,rate,comment,password}
			 default none for no update vaule
______________________________________________________________________________________________________________	
______________________________________________________________________________________________________________			
______________________________________________________________________________________________________________					
api/appiontment

	GET api/appiontments/:id  >> id as userid
		if (id doctor) or any admin or any resp
			get all appointment for doctor id
			{appointID:appointID} >>   appointID is array of appointIDs
		if (id patient) or any admin or any resp
			get all appointment for patent id
			{appointID:appointID} >>   appointID is array of appointIDs
			
	GET api/appiontment/:id >> id as appointID
		if (id doctor) or any admin or any resp >> who send reqest
			get appointment for doctor id
			{{appointID, doctorID, patientID, creatorID,date,bill,status},...}
		if (id patient) or any admin or any resp
			get appointment for patent id
			{{appointID, doctorID, patientID, creatorID,date,bill,status},...}
			  
	POST api/appointment/:id >> id as patient or resp
		if id patient or resp who send req
			post appointment details
			{appointID, doctorID, patientID, creatorID,date,bill,status} 
	
	PATCH api/appointment/:id >> id as appointID
		if id patient or resp who send req
			edit appointment details
			{appointID, doctorID, patientID, creatorID,date,bill,status}
			none for no update
	
	DELETE api/appointment/:id 
		if id patient or resp who send req
			delete appointment details
			{status:'deledted'}
				we will note delete it just turn staus to deleted
	
______________________________________________________________________________________________________________			
______________________________________________________________________________________________________________			
______________________________________________________________________________________________________________			
	
	
api/result
	GET api/results/:id >> id patient id
		req >> {patientID}
		if id::patient === reqesterID or id::doctor
			res >> {resultID,...}
		
	GET api/result/:id >> result id
		req >> {resultID}
		if id::patient === reqesterID or id::doctor who make reqest
			res >> {patientName, date, labName,creator,editDate,edited,editBy, describtion:{discrb,photo}}
	POST api/result
		if id::patient === reqesterID or id::doctor who make reqest
			req >> {patientName, date, labName,creator, describtion:{discrb,photo}}
			add id in backend
		res >> {postResultStatus}
	PATCH api/result/: >> result id
	if id::patient === reqesterID or id::doctor who make reqest
			req >> {patientName, date, labName,creator,editDate,edited,editBy, describtion:{discrb,photo}}
			add id in backend
		res >> {postResultStatus}
	

______________________________________________________________________________________________________________			
______________________________________________________________________________________________________________			
______________________________________________________________________________________________________________			
	
api/roshita
	GET api/roshitas/:id :: patient id
		if( (USER_ID===patientID) or (USER_ID===doctorID) )
			get patientID
			res {roshitaID,...}
	GET api/roshita/:id :: roshita id
		
		if id::patient === reqesterID or id::doctor who make reqest
			res >> {patientName, date, labName,creator,editDate,edited,editBy, describtion:{discrb,photo}}
	POST api/roshita
		if id::patient === reqesterID or id::doctor who make reqest
			req >> {patientName, date, labName,creator, describtion:{discrb,photo}}
			add id in backend
		res >> {postroshitaStatus}
	PATCH api/roshita/: >> roshita id
	if id::patient === reqesterID or id::doctor who make reqest
			req >> {patientName, date, labName,creator,editDate,edited,editBy, describtion:{discrb,photo}}
			add id in backend
		res >> {postroshitaStatus}
		

______________________________________________________________________________________________________________			
______________________________________________________________________________________________________________			
______________________________________________________________________________________________________________			
	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>return userID
api/search
	GET api/search/:keyword
		get userID and search from keyword
		if patient search
			search for DoctorNames or specialization
			res {userID,...}
		if doctor who made search
			search for PatientNames or patientID
			res {userID,...}
		if admin
			search for names or specialization or patientID or doctorID or respID
			res {userID,...}
	

______________________________________________________________________________________________________________			
______________________________________________________________________________________________________________			
______________________________________________________________________________________________________________			

api/timeSlot
	GET api/timeSlots/:id :: id for doctor
		get id from url
		res {timeSlotID, ...}
	GET api/timeSlot/:id
		get id from url 
		res {{timeSlotID,doctorID,date}}
	POST api/timeSlot
		req {doctorID,date}
			if doctorID===USER_ID
				add new slot
		res {timeSlotAddStatus}
	PATCH api/timeSlot
		req {doctorID,timeSlotID,date}
		if doctorID===USER_ID
				edit slot
		res {timeSlotAddStatus}
	DELETE api/timeSlot
		req {doctorID,timeSlotID,date}
		if doctorID===USER_ID
				delete slot
		res {timeSlotAddStatus}
______________________________________________________________________________________________________________			
______________________________________________________________________________________________________________			
______________________________________________________________________________________________________________			
	

api/signup

______________________________________________________________________________________________________________			
______________________________________________________________________________________________________________			
______________________________________________________________________________________________________________			
	
api/login
	POST api/login
		req >> {userName, password}
		check username in emails and phones then check password
		if auth secusseded 
			res >>  {token, authState, USER_ID}
		if auth faild
			res >> {authState}
	POST api/login/forget
		req >> {userName} :: userName email or phone
	POST api/login/reset
		req >> {resetCode}
		res >> {resetCodeOK}
	POST api/login/newPWd
		req >> {newPssword}		
		res >> {token, authState, USER_ID}
______________________________________________________________________________________________________________			
______________________________________________________________________________________________________________			
______________________________________________________________________________________________________________			
	
api/logout
	POST api/logout
		logout form account


